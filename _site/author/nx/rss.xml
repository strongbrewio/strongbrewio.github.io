<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.strongbrew.io</title>
   
   <link>https://blog.strongbrew.io/</link>
   <description></description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Migrating to Nx</title>
	  <link>//migrating-to-nx/</link>
	  <author></author>
	  <pubDate>2019-01-05T00:00:00+00:00</pubDate>
	  <guid>//migrating-to-nx/</guid>
	  <description><![CDATA[
	     <p>I have been using a monorepo with Nx for a while now (~1 year, an almost infinite period in javascript land üòÇ). And I must say, this has been a real eye opening experience. I‚Äôve gotten to the point that everyone that is remotely interested into talking to me is going to get a pitch on why monorepos are the best and how Nx can help us in achieving this. I even gave a talk about this very topic at NG-BE which you can find <a href="https://www.youtube.com/watch?v=d04U7SjORTI" target="_blank">here</a>.</p>

<p>The most common response that I‚Äôve gotten is: ‚ÄúThat all sounds great, but I‚Äôll never be able to convince everyone in my company to start using a monorepo‚Äù. And this is the reason that I‚Äôm writing this blogpost. Because moving to a monorepo doesn‚Äôt have to be a big bang change at all. In fact, this is something you could do gradually, at your own pace over a long time period (although, I would try to do this in a reasonable time frame).</p>

<h2 id="migrating">Migrating</h2>

<h3 id="current-situation">Current situation</h3>

<p>In most companies that I‚Äôve visited over the past years, the situation is as follows. There are multiple teams working on different applications or libraries. Every team has its own repository where they store the code that is written by that team. If code needs to be shared with different teams, some code is published to an (internal) npm registry by one team and loaded by another team as a dependency.</p>

<p>This situation could be referred to as a being a ‚Äòpolyrepo approach‚Äô and kind of looks like this:</p>

<p><img src="https://www.dropbox.com/s/lbf2k9rrd16mo42/polyrepo-migration-to-nx.png?raw=1" alt="polyrepo" /></p>

<p>In this scenario, we have three teams with three repos. Team 1 is working on a ‚Äòui-kit‚Äô that is being published to npm. The other teams load this ‚Äòui-kit‚Äô by downloading it from the (internal) npm registry.</p>

<p><strong>Note:</strong> Explaining why publishing to npm might not be the best idea in every situation and how a monorepo fixes this is not in the scope of this blogpost. For that, I would like to refer you to this <a href="https://www.youtube.com/watch?v=q4XmAy6_ucw" target="_blank">excellent talk</a> by Manfred Steyer.</p>

<h3 id="hybrid-situation">Hybrid situation</h3>

<p>Most people think that, when you want to move to a monorepo, all three teams in the example above need to do that in a single go. But this isn‚Äôt true at all. In fact, there is an obvious step between a polyrepo and a monorepo which I like to refer to as being a ‚Äòhybrid approach‚Äô. And it looks a little like this:</p>

<p><img src="https://www.dropbox.com/s/uxpdfxim81oz2x4/hybrid-migrating-to-nx.png?raw=1" alt="hybrid" /></p>

<p>In this specific scenario, as a first step towards a monorepo, the team responsible for ‚Äòapp 1‚Äô and the team responsible for the ‚Äòui-kit‚Äô have moved there code into a single repository. This repo is setup using Nx (hence the distinction between apps and libs inside of that repo).</p>

<p>The important thing to notice here is the fact that the ui-kit is both published to npm AND imported inside of ‚Äòapp 1‚Äô. This means that both inside the monorepo as outside of the monorepo this library is being used. This is exactly what is meant by the hybrid approach.</p>

<p>This allows us to gradually start with a ‚Äòmonorepo‚Äô. You can start with two teams, and as soon as these get accustomed to it and everything is starting to run smoothly, a new team can be added. In the mean time, libraries that need to be shared with teams outside of the monorepo can still be published to npm. The end goal is that everything is moved to the monorepo.</p>

<p>It is also an ideal way to convince the non-believers of this approach. If people see that two teams can work perfectly well together inside of a single repo, you have a viable and working example to sell the idea!</p>

<h3 id="complete-monorepo-situation">Complete monorepo situation</h3>

<p>When everyone has move to the monorepo, the situation could look like this:</p>

<p><img src="https://www.dropbox.com/s/wyc5703yts5ddp2/monorepo-migrating-to-nx.png?raw=1" alt="monorepo	" /></p>

<p>Here, we no longer use npm as a means to distribute code between different teams.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Migrating to a Nx or a monorepo is something you can do one small step at a time. After having demonstrated everything works for a small amount of teams/projects/code, you can convince everyone that this is in fact they way to go (not always of course) and keep on migrating towards a complete monorepo!</p>

	  ]]></description>
	</item>


</channel>
</rss>
